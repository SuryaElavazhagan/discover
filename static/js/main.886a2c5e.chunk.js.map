{"version":3,"sources":["store/index.ts","assets/search.svg","constants/routes.ts","components/Header.tsx","constants/tmdb.ts","api/index.ts","api/movies.ts","components/Movie.tsx","api/shows.ts","constants/filters.ts","components/MovieList.tsx","components/Filter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["filterSlice","createSlice","name","initialState","search","genre","type","year","Date","getFullYear","rating","movieGenres","tvGenres","reducers","changeType","state","action","payload","changeGenre","changeSearch","changeYear","changeRating","changeMovieGenres","changeTvGenres","reducer","actions","store","configureStore","filter","NAVBAR_ITEMS","popular","trend","new","top","Header","location","useLocation","useDispatch","className","to","Object","keys","map","item","clsx","pathname","src","SearchIcon","alt","placeholder","onChange","e","target","value","trim","length","TMDB","process","tmdb","axios","create","timeout","baseURL","interceptors","request","use","config","params","api_key","parseMovie","movie","dayjs","release_date","poster","poster_path","id","title","vote_average","genre_ids","getMovies","page","a","url","get","data","movies","results","totalPages","total_pages","totalResults","total_results","items","discoverMovie","filters","sortBy","releaseDateGte","startOf","format","releaseDateLte","endOf","sort_by","with_genres","join","getMovieGenres","genres","label","Movie","parseShow","show","first_air_date","getShows","shows","discoverShow","getShowGenres","TYPES","YEAR","range","i","isDefaultValue","noGenre","isDefaultYearRange","isDefaultRating","MovieList","useSelector","useState","loading","setLoading","error","setError","setPage","setMovies","getGenre","undefined","find","mGenre","sGenre","fetchMovies","kind","substring","useEffect","height","width","onClick","pageCount","initialPage","onPageChange","selected","pageRangeDisplayed","marginPagesDisplayed","Filter","dispath","setGenre","startYear","setStartYear","endYear","setEndYear","defaultValue","options","isMulti","values","allowHalf","allowClear","App","dispatch","Promise","all","loadGenres","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.886a2c5e.chunk.js","sourcesContent":["import { createSlice, configureStore } from '@reduxjs/toolkit';\n\nexport interface IRootState {\n  filter: IFilterState;\n}\n\ninterface IFilterState {\n  search: string;\n  genre: number[];\n  type: 'movie' | 'tv';\n  year: [number, number];\n  rating: [number, number];\n  movieGenres: Array<Record<string, any>>;\n  tvGenres: Array<Record<string, any>>;\n}\n\ninterface IFilterAction {\n  type: string;\n  payload: any;\n}\n\ntype IFilterReducers  = {\n  changeType: (state: IFilterState, action: IFilterAction) => void;\n  changeGenre: (state: IFilterState, action: IFilterAction) => void;\n  changeSearch: (state: IFilterState, action: IFilterAction) => void;\n  changeYear: (state: IFilterState, action: IFilterAction) => void;\n  changeRating: (state: IFilterState, action: IFilterAction) => void;\n  changeMovieGenres: (state: IFilterState, action: IFilterAction) => void;\n  changeTvGenres: (state: IFilterState, action: IFilterAction) => void;\n}\n\nexport const filterSlice = createSlice<IFilterState, IFilterReducers>({\n  name: 'filter',\n  initialState: {\n    search: '',\n    genre: [],\n    type: 'movie',\n    year: [1900, (new Date()).getFullYear()],\n    rating: [0, 5],\n    movieGenres: [],\n    tvGenres: []\n  },\n  reducers: {\n    changeType: (state, action) => {\n      state.type = action.payload;\n      state.search = '';\n      state.genre = [];\n      state.year = [1900, (new Date()).getFullYear()];\n      state.rating = [0, 5];\n    },\n    changeGenre: (state, action) => {\n      state.genre = action.payload;\n    },\n    changeSearch: (state, action) => {\n      state.search = action.payload;\n    },\n    changeYear: (state, action) => {\n      state.year = action.payload;\n    },\n    changeRating: (state, action) => {\n      state.rating = action.payload;\n    },\n    changeMovieGenres: (state, action) => {\n      state.movieGenres = action.payload;\n    },\n    changeTvGenres: (state, action) => {\n      state.tvGenres = action.payload;\n    }\n  },\n});\n\nconst { reducer, actions: {\n  changeType,\n  changeGenre,\n  changeSearch,\n  changeYear,\n  changeRating,\n  changeMovieGenres,\n  changeTvGenres\n} } = filterSlice;\n\nconst store = configureStore({\n  reducer: {\n    filter: reducer\n  }\n});\n\nexport {\n  store,\n  changeType,\n  changeGenre,\n  changeSearch,\n  changeYear,\n  changeRating,\n  changeMovieGenres,\n  changeTvGenres\n};\n","export default __webpack_public_path__ + \"static/media/search.f5d4cc57.svg\";","const NAVBAR_ITEMS: Record<string, string> = {\n  popular: 'Popular',\n  trend: 'Trend',\n  new: 'Newest',\n  top: 'Top rated'\n}\n\nexport {\n  NAVBAR_ITEMS\n};\n","import clsx from 'clsx';\nimport { ChangeEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link, useLocation } from 'react-router-dom';\nimport SearchIcon from '../assets/search.svg';\nimport { NAVBAR_ITEMS } from '../constants/routes';\n\nfunction Header() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  function handleSearch(e: ChangeEvent<HTMLInputElement>) {\n    const query = e.target.value.trim();\n    if (query.length > 0) {\n\n    }\n  }\n\n  return (\n    <header className=\"flex justify-between items-center\">\n      <Link to=\"/\">\n        <p className=\"text-2xl text-white\">Discover</p>\n      </Link>\n      <nav>\n        <ul className=\"list-none flex\">\n          {\n            Object.keys(NAVBAR_ITEMS).map((item) => (\n              <li\n                key={item}\n                className={clsx(\n                  'font-bold',\n                  'px-3',\n                  'cursor-pointer',\n                  { 'text-white': location.pathname === `/${item}`, 'text-blue-500': location.pathname !== `/${item}` }\n                )}\n              >\n                <Link to={item}>\n                  {NAVBAR_ITEMS[item]}\n                </Link>\n              </li>\n            ))\n          }\n        </ul>\n      </nav>\n      <div className=\"flex\">\n        <img src={SearchIcon} alt=\"Search Icon\" />\n        <input\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"SEARCH\"\n          className=\"font-bold uppercase border-0 bg-gray-800 text-blue-500 outline-none select-none placeholder-blue-500\"\n          onChange={handleSearch}\n        />\n      </div>\n    </header>\n  );\n}\n\nexport default Header;","const TMDB = {\n  BASE_URL: 'https://api.themoviedb.org/3',\n  IMAGE_BASE_URL: 'https://image.tmdb.org/t/p/original',\n  APIKEY: process.env.REACT_APP_TMDB_API_KEY\n};\n\nexport {\n  TMDB\n};","import axios from 'axios';\nimport { TMDB } from '../constants/tmdb';\n\nexport interface IPaginatedResponse<T> {\n  page: number;\n  totalPages: number;\n  totalResults: number;\n  items: T[];\n}\n\nconst tmdb = axios.create({\n  timeout: 4000,\n  baseURL: TMDB.BASE_URL,\n});\n\ntmdb.interceptors.request.use((config) => {\n  config.params = {\n    ...config.params,\n    api_key: TMDB.APIKEY\n  };\n  return config;\n});\n\nexport {\n  tmdb\n};\n","import { IPaginatedResponse, tmdb } from \".\";\nimport { TMDB } from \"../constants/tmdb\";\nimport dayjs from 'dayjs';\n\nexport interface IMovie {\n  poster: string;\n  id: number;\n  title: string;\n  rating: number;\n  year: number;\n  genre: number[];\n}\n\nexport interface IGenre {\n  id: number;\n  name: string;\n}\n\nexport interface IDiscoverMovies {\n  type: string;\n  page: number;\n  rating: [number, number];\n  year: [number, number];\n  genre: number[];\n}\n\nfunction parseMovie(movie: Record<string, any>): IMovie {\n  const year = dayjs(movie.release_date).year();\n  return {\n    poster: movie?.poster_path ? `${TMDB.IMAGE_BASE_URL}${movie?.poster_path}` : '',\n    id: movie.id,\n    title: movie.title,\n    rating: movie.vote_average,\n    year,\n    genre: movie.genre_ids\n  };\n}\n\nasync function getMovies(type: string, page: number): Promise<IPaginatedResponse<IMovie>> {\n  let url = '';\n  switch (type) {\n    case 'popular':\n      url = 'movie/popular';\n      break;\n    case 'trend':\n      url = 'trending/movie/week';\n      break;\n    case 'new':\n      url = 'movie/now_playing';\n      break;\n    case 'top':\n      url = 'movie/top_rated';\n      break;\n  }\n  const { data } = await tmdb.get(url, { params: { page } });\n  const movies = data.results.map(parseMovie);\n\n  return {\n    totalPages: data.total_pages,\n    totalResults: data.total_results,\n    page: data.page,\n    items: movies\n  };\n}\n\nasync function discoverMovie(filters: IDiscoverMovies) {\n  const {\n    year,\n    type,\n    rating,\n    page,\n    genre\n  } = filters;\n  let sortBy = '';\n  switch (type) {\n    case 'popular':\n      sortBy = 'popularity.desc';\n      break;\n    case 'trend':\n      sortBy = 'vote_count.desc';\n      break;\n    case 'new':\n      sortBy = 'release_date.desc';\n      break;\n    case 'top':\n      sortBy = 'vote_average.desc';\n      break;\n  }\n  let releaseDateGte = dayjs(`1-1-${year[0]}`).startOf('year').format('YYYY-MM-DD');\n  let releaseDateLte = dayjs(`1-1-${year[1]}`).endOf('year').format('YYYY-MM-DD');\n  const { data } = await tmdb.get('discover/movie', {\n    params: {\n      sort_by: sortBy,\n      'release_date.gte': releaseDateGte,\n      'release_date.lte': releaseDateLte,\n      'vote_average.gte': rating[0],\n      'vote_average.lte': rating[1],\n      page,\n      with_genres: genre.join(',')\n    }\n  });\n  const movies = data.results.map(parseMovie);\n\n  return {\n    totalPages: data.total_pages,\n    totalResults: data.total_results,\n    page: data.page,\n    items: movies\n  };\n}\n\nasync function getMovieGenres() {\n  const { data } = await tmdb.get('genre/movie/list');\n  return (data.genres as IGenre[]).map((genre) => ({\n    label: genre.name,\n    value: genre.id\n  }));\n}\n\nexport {\n  discoverMovie,\n  getMovies,\n  getMovieGenres\n};\n","import { IMovie } from \"../api/movies\";\n\ninterface IMovieProps {\n  movie: IMovie;\n  genre: string;\n}\n\nfunction Movie({ movie, genre }: IMovieProps) {\n  return (\n    <div className=\"flex flex-col items-center\">\n      <img\n        src={movie.poster}\n        alt=\"Movie Poster\"\n        className=\"w-60 h-96 object-contain\"\n      />\n      <p className=\"text-blue-500 font-bold py-1\">\n        { movie.title }\n      </p>\n      <p className=\"text-gray-500 font-light text-sm\">{genre}, { movie.year }</p>\n    </div>\n  );\n}\n\nexport default Movie;","import dayjs from 'dayjs';\nimport { TMDB } from '../constants/tmdb';\nimport { tmdb } from './index';\nimport { IDiscoverMovies, IGenre, IMovie } from './movies';\n\nfunction parseShow(show: Record<string, any>): IMovie {\n  const year = dayjs(show.first_air_date).year();\n  return {\n    poster: show?.poster_path ? `${TMDB.IMAGE_BASE_URL}${show?.poster_path}` : '',\n    id: show.id,\n    title: show.name,\n    rating: show.vote_average,\n    year,\n    genre: show.genre_ids\n  };\n}\n\nasync function getShows(type: string, page: number) {\n  let url = '';\n  switch (type) {\n    case 'popular':\n      url = 'tv/popular';\n      break;\n    case 'trend':\n      url = 'trending/tv/week';\n      break;\n    case 'new':\n      url = 'tv/on_the_air';\n      break;\n    case 'top':\n      url = 'tv/top_rated';\n      break;\n  }\n  const { data } = await tmdb.get(url, { params: { page } });\n  const shows = data.results.map(parseShow);\n\n  return {\n    totalPages: data.total_pages,\n    totalResults: data.total_results,\n    page: data.page,\n    items: shows\n  };\n}\n\nasync function discoverShow(filters: IDiscoverMovies) {\n  const {\n    year,\n    type,\n    rating,\n    page,\n    genre\n  } = filters;\n  let sortBy = '';\n  switch (type) {\n    case 'popular':\n      sortBy = 'popularity.desc';\n      break;\n    case 'trend':\n      sortBy = 'vote_count.desc';\n      break;\n    case 'new':\n      sortBy = 'release_date.desc';\n      break;\n    case 'top':\n      sortBy = 'vote_average.desc';\n      break;\n  }\n  let releaseDateGte = dayjs(`1-1-${year[0]}`).startOf('year').format('YYYY-MM-DD');\n  let releaseDateLte = dayjs(`1-1-${year[1]}`).endOf('year').format('YYYY-MM-DD');\n  const { data } = await tmdb.get('discover/tv', {\n    params: {\n      sort_by: sortBy,\n      'release_date.gte': releaseDateGte,\n      'release_date.lte': releaseDateLte,\n      'vote_average.gte': rating[0],\n      'vote_average.lte': rating[1],\n      page,\n      with_genres: genre.join(',')\n    }\n  });\n  const shows = data.results.map(parseShow);\n\n  return {\n    totalPages: data.total_pages,\n    totalResults: data.total_results,\n    page: data.page,\n    items: shows\n  };\n}\n\nasync function getShowGenres() {\n  const { data } = await tmdb.get('/genre/tv/list');\n  return (data.genres as IGenre[]).map((genre) => ({\n    label: genre.name,\n    value: genre.id\n  }));\n}\n\nexport {\n  discoverShow,\n  getShows,\n  getShowGenres\n};\n","import range from \"lodash.range\";\n\nconst TYPES = [\n  { label: 'Movie', value: 'movie' },\n  { label: 'TV Shows', value: 'tv' }\n];\n\nconst YEAR = range(1900, (new Date()).getFullYear()).map((i) => ({\n  label: i,\n  value: i\n}));\n\nfunction isDefaultValue(genre: number[], year: number[], rating: number[]) {\n  const noGenre = genre.length === 0;\n  const isDefaultYearRange = year[0] === 1900 && year[1] === (new Date()).getFullYear();\n  const isDefaultRating = rating[0] === 0 && rating[1] === 5;\n\n  return noGenre && isDefaultYearRange && isDefaultRating;\n}\n\nexport {\n  TYPES,\n  YEAR,\n  isDefaultValue\n};\n","import { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\nimport ReactPaginate from 'react-paginate';\n\nimport { IPaginatedResponse } from \"../api\";\nimport { discoverMovie, getMovies, IMovie } from \"../api/movies\";\nimport Movie from \"./Movie\";\nimport { useSelector } from \"react-redux\";\nimport { IRootState } from \"../store\";\nimport { discoverShow, getShows } from \"../api/shows\";\nimport { isDefaultValue } from \"../constants/filters\";\n\nfunction MovieList() {\n  const location = useLocation();\n  const type = useSelector((state: IRootState) => state.filter.type);\n  const genre = useSelector((state: IRootState) => state.filter.genre);\n  const year = useSelector((state: IRootState) => state.filter.year);\n  const rating = useSelector((state: IRootState) => state.filter.rating);\n  const movieGenres = useSelector((state: IRootState) => state.filter.movieGenres);\n  const tvGenres = useSelector((state: IRootState) => state.filter.tvGenres);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [page, setPage] = useState(0);\n  const [movies, setMovies] = useState<IPaginatedResponse<IMovie>>({\n    totalPages: 0,\n    page: 0,\n    totalResults: 0,\n    items: []\n  });\n\n  useEffect(() => {\n    fetchMovies();\n  }, [location.pathname, type, page, genre, year, rating]);\n\n  useEffect(() => {\n    if (page !== 0) {\n      setPage(0);\n    }\n  }, [location.pathname, type, genre, year, rating]);\n\n  function getGenre(genre: number | undefined) {\n    if (genre != undefined) {\n      let value;\n      if (type === 'movie') {\n        value = movieGenres.find((mGenre) => mGenre.value === genre);\n      } else {\n        value = tvGenres.find((sGenre) => sGenre.value === genre);\n      }\n\n      return value?.label ?? '';\n    }\n\n    return '';\n  }\n\n  async function fetchMovies() {\n    try {\n      setError('');\n      setLoading(true);\n      const kind = location.pathname.substring(1);\n      if (type === 'movie') {\n        if (!isDefaultValue(genre, year, rating)) {\n          setMovies(await discoverMovie({\n            page: page + 1,\n            type: kind,\n            genre,\n            year,\n            rating\n          }));\n        } else {\n          setMovies(await getMovies(kind, page + 1));\n        }\n      } else {\n        if (!isDefaultValue(genre, year, rating)) {\n          setMovies(await discoverShow({\n            page: page + 1,\n            type: kind,\n            genre,\n            year,\n            rating\n          }));\n        } else {\n          setMovies(await getShows(kind, page + 1));\n        }\n      }\n    } catch (e) {\n      setError('Something went wrong! Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  function renderList() {\n    if (loading) {\n      return (\n        <div className=\"w-full h-full flex items-center justify-center\">\n          <Loader\n            type=\"Puff\"\n            height={100}\n            width={100}\n          />\n        </div>\n      );\n    } else if (error.length) {\n      return (\n        <div className=\"w-full h-full flex flex-col items-center justify-center text-white\">\n          { error }\n          <button\n            className=\"px-8 py4 rounded-xl bg-white\"\n            onClick={fetchMovies}\n          >\n            Retry\n          </button>\n        </div>\n      );\n    } else if (movies.totalResults === 0) {\n      return (\n        <div className=\"w-full h-full flex items-center justify-center text-white\">\n          No results found.\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"w-full h-full overflow-scroll\">\n          <div className=\"grid grid-cols-3 gap-4\">\n            {movies.items.map((movie) => <Movie key={movie.id} movie={movie} genre={getGenre(movie.genre[0])} />)}\n          </div>\n          <div className=\"my-8 flex justify-center\" id=\"react-paginate\">\n            <ReactPaginate\n              pageCount={movies.totalPages}\n              initialPage={page}\n              onPageChange={({ selected }) => {setPage(selected)}}\n              pageRangeDisplayed={3}\n              marginPagesDisplayed={3}\n            />\n          </div>\n        </div>\n      );\n    }\n  }\n\n  return renderList();\n}\n\nexport default MovieList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport Select, { OptionsType, OptionTypeBase } from 'react-select';\nimport Rate from 'rc-rate';\n\nimport { TYPES, YEAR } from '../constants/filters';\nimport { changeGenre, changeRating, changeType, changeYear, IRootState } from '../store';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nfunction Filter() {\n  const dispath = useDispatch();\n  const movieGenres = useSelector((state: IRootState) => state.filter.movieGenres);\n  const tvGenres = useSelector((state: IRootState) => state.filter.tvGenres);\n  const type = useSelector((state: IRootState) => state.filter.type);\n  const year = useSelector((state: IRootState) => state.filter.year);\n  const [genre, setGenre] = useState<OptionsType<OptionTypeBase>>([]);\n  const [startYear, setStartYear] = useState(YEAR[0]);\n  const [endYear, setEndYear] = useState(YEAR[YEAR.length - 1]);\n\n  useEffect(() => {\n    setGenre([]);\n  }, [type]);\n\n  function handleTypeChange(value: OptionTypeBase | null) {\n    if (value !== null) {\n      dispath(changeType(value.value));\n    }\n  }\n\n  function handleGenreChange(values: OptionsType<OptionTypeBase>) {\n    dispath(changeGenre(values.map(value => value.value)));\n    setGenre(values);\n  }\n\n  function handleRatingChange(value: number) {\n    dispath(changeRating([value, 5]));\n  }\n\n  function handleStartYearChange(value: OptionTypeBase | null) {\n    if (value !== null && value.value < year[1]) {\n      dispath(changeYear([value.value, year[1]]));\n      setStartYear(value as any);\n    }\n  }\n\n  function handleEndYearChange(value: OptionTypeBase | null) {\n    if (value !== null && value.value > year[0]) {\n      dispath(changeYear([year[0], value.value]));\n      setEndYear(value as any);\n    }\n  }\n\n  return (\n    <aside className=\"px-10 py-8 shadow-2xl w-96\">\n      <p className=\"text-gray-500 my-2 pr-12 font-bold\">DISCOVER OPTIONS</p>\n      <div>\n        <p className=\"my-2 text-gray-500\">Type</p>\n        <Select\n          defaultValue={TYPES[0]}\n          options={TYPES}\n          onChange={handleTypeChange}\n        />\n        <p className=\"my-2 text-gray-500\">Genre</p>\n        <Select\n          isMulti\n          value={genre}\n          options={type === 'movie' ? movieGenres : tvGenres}\n          onChange={handleGenreChange}\n        />\n        <p className=\"my-2 text-gray-500\">Year</p>\n        <div className=\"flex items-center\">\n          <Select\n            value={startYear}\n            options={YEAR}\n            className=\"w-24\"\n            onChange={handleStartYearChange}\n          />\n          <span className=\"text-white mx-2\">-</span>\n          <Select\n            value={endYear}\n            options={YEAR}\n            className=\"w-24\"\n            onChange={handleEndYearChange}\n          />\n        </div>\n        <p className=\"my-2 text-gray-500\">Ratings</p>\n        <Rate\n          allowHalf\n          allowClear\n          onChange={handleRatingChange}\n        />\n        <span className=\"mx-1 text-white\">&amp; up</span>\n      </div>\n    </aside>\n  );\n}\n\nexport default Filter;","import { useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport Header from './components/Header';\nimport MovieList from \"./components/MovieList\";\nimport Filter from \"./components/Filter\";\nimport { getMovieGenres } from \"./api/movies\";\nimport { useDispatch } from \"react-redux\";\nimport { changeMovieGenres, changeTvGenres } from \"./store\";\nimport { getShowGenres } from \"./api/shows\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    loadGenres();\n  }, []);\n\n  async function loadGenres() {\n    const [\n      movieGenres,\n      tvGenres\n    ] = await Promise.all([getMovieGenres(), getShowGenres()])\n    dispatch(changeMovieGenres(movieGenres));\n    dispatch(changeTvGenres(tvGenres));\n  }\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Redirect to=\"/popular\" />\n        </Route>\n        <Route path=\"*\">\n          <div className=\"app flex bg-gray-800 w-screen\th-screen overflow-hidden\">\n            <div className=\"flex-1 p-6\">\n              <Header />\n              <div className=\"p-6 w-full h-full\">\n                <MovieList />\n              </div>\n            </div>\n            <Filter />\n          </div>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// React loader css\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n// React star css\nimport 'rc-rate/assets/index.css';\n\nimport './styles/index.css';\nimport './styles/pagination.css';\nimport { store } from './store';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}